// Code generated by MockGen. DO NOT EDIT.
// Source: core/retry/strategy.go
//
// Generated by this command:
//
//	mockgen -source=core/retry/strategy.go -destination=tests/mocks/mock_strategy.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStrategy is a mock of Strategy interface.
type MockStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyMockRecorder
	isgomock struct{}
}

// MockStrategyMockRecorder is the mock recorder for MockStrategy.
type MockStrategyMockRecorder struct {
	mock *MockStrategy
}

// NewMockStrategy creates a new mock instance.
func NewMockStrategy(ctrl *gomock.Controller) *MockStrategy {
	mock := &MockStrategy{ctrl: ctrl}
	mock.recorder = &MockStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrategy) EXPECT() *MockStrategyMockRecorder {
	return m.recorder
}

// ShouldRetry mocks base method.
func (m *MockStrategy) ShouldRetry(attempt uint) (time.Duration, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRetry", attempt)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ShouldRetry indicates an expected call of ShouldRetry.
func (mr *MockStrategyMockRecorder) ShouldRetry(attempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRetry", reflect.TypeOf((*MockStrategy)(nil).ShouldRetry), attempt)
}
