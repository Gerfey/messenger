// Code generated by MockGen. DO NOT EDIT.
// Source: manual interface definition

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// TransportManager represents the interface we need for testing
type TransportManager interface {
	Start(ctx context.Context, consumeOnly []string)
	Stop()
}

// MockTransportManager is a mock of TransportManager interface.
type MockTransportManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransportManagerMockRecorder
}

// MockTransportManagerMockRecorder is the mock recorder for MockTransportManager.
type MockTransportManagerMockRecorder struct {
	mock *MockTransportManager
}

// NewMockTransportManager creates a new mock instance.
func NewMockTransportManager(ctrl *gomock.Controller) *MockTransportManager {
	mock := &MockTransportManager{ctrl: ctrl}
	mock.recorder = &MockTransportManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportManager) EXPECT() *MockTransportManagerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockTransportManager) Start(ctx context.Context, consumeOnly []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx, consumeOnly)
}

// Start indicates an expected call of Start.
func (mr *MockTransportManagerMockRecorder) Start(ctx, consumeOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransportManager)(nil).Start), ctx, consumeOnly)
}

// Stop mocks base method.
func (m *MockTransportManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTransportManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransportManager)(nil).Stop))
}
