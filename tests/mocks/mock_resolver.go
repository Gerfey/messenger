// Code generated by MockGen. DO NOT EDIT.
// Source: api/resolver.go
//
// Generated by this command:
//
//	mockgen -source=api/resolver.go -destination=tests/mocks/mock_resolver.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTypeResolver is a mock of TypeResolver interface.
type MockTypeResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTypeResolverMockRecorder
	isgomock struct{}
}

// MockTypeResolverMockRecorder is the mock recorder for MockTypeResolver.
type MockTypeResolverMockRecorder struct {
	mock *MockTypeResolver
}

// NewMockTypeResolver creates a new mock instance.
func NewMockTypeResolver(ctrl *gomock.Controller) *MockTypeResolver {
	mock := &MockTypeResolver{ctrl: ctrl}
	mock.recorder = &MockTypeResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeResolver) EXPECT() *MockTypeResolverMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockTypeResolver) Register(arg0 string, arg1 reflect.Type) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register.
func (mr *MockTypeResolverMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTypeResolver)(nil).Register), arg0, arg1)
}

// RegisterMessage mocks base method.
func (m *MockTypeResolver) RegisterMessage(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterMessage", arg0)
}

// RegisterMessage indicates an expected call of RegisterMessage.
func (mr *MockTypeResolverMockRecorder) RegisterMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMessage", reflect.TypeOf((*MockTypeResolver)(nil).RegisterMessage), arg0)
}

// RegisterStamp mocks base method.
func (m *MockTypeResolver) RegisterStamp(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterStamp", arg0)
}

// RegisterStamp indicates an expected call of RegisterStamp.
func (mr *MockTypeResolverMockRecorder) RegisterStamp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStamp", reflect.TypeOf((*MockTypeResolver)(nil).RegisterStamp), arg0)
}

// ResolveMessageType mocks base method.
func (m *MockTypeResolver) ResolveMessageType(arg0 string) (reflect.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveMessageType", arg0)
	ret0, _ := ret[0].(reflect.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveMessageType indicates an expected call of ResolveMessageType.
func (mr *MockTypeResolverMockRecorder) ResolveMessageType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveMessageType", reflect.TypeOf((*MockTypeResolver)(nil).ResolveMessageType), arg0)
}

// ResolveStampType mocks base method.
func (m *MockTypeResolver) ResolveStampType(arg0 string) (reflect.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveStampType", arg0)
	ret0, _ := ret[0].(reflect.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveStampType indicates an expected call of ResolveStampType.
func (mr *MockTypeResolverMockRecorder) ResolveStampType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveStampType", reflect.TypeOf((*MockTypeResolver)(nil).ResolveStampType), arg0)
}
