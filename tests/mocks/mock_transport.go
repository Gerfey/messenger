// Code generated by MockGen. DO NOT EDIT.
// Source: api/transport.go
//
// Generated by this command:
//
//	mockgen -source=api/transport.go -destination=tests/mocks/mock_transport.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/gerfey/messenger/api"
	config "github.com/gerfey/messenger/config"
	gomock "go.uber.org/mock/gomock"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
	isgomock struct{}
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockTransport) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTransportMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTransport)(nil).Name))
}

// Receive mocks base method.
func (m *MockTransport) Receive(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockTransportMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockTransport)(nil).Receive), arg0, arg1)
}

// Send mocks base method.
func (m *MockTransport) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTransportMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransport)(nil).Send), arg0, arg1)
}

// MockRetryableTransport is a mock of RetryableTransport interface.
type MockRetryableTransport struct {
	ctrl     *gomock.Controller
	recorder *MockRetryableTransportMockRecorder
	isgomock struct{}
}

// MockRetryableTransportMockRecorder is the mock recorder for MockRetryableTransport.
type MockRetryableTransportMockRecorder struct {
	mock *MockRetryableTransport
}

// NewMockRetryableTransport creates a new mock instance.
func NewMockRetryableTransport(ctrl *gomock.Controller) *MockRetryableTransport {
	mock := &MockRetryableTransport{ctrl: ctrl}
	mock.recorder = &MockRetryableTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryableTransport) EXPECT() *MockRetryableTransportMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockRetryableTransport) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRetryableTransportMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRetryableTransport)(nil).Name))
}

// Receive mocks base method.
func (m *MockRetryableTransport) Receive(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockRetryableTransportMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockRetryableTransport)(nil).Receive), arg0, arg1)
}

// Retry mocks base method.
func (m *MockRetryableTransport) Retry(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retry indicates an expected call of Retry.
func (mr *MockRetryableTransportMockRecorder) Retry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockRetryableTransport)(nil).Retry), arg0, arg1)
}

// Send mocks base method.
func (m *MockRetryableTransport) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRetryableTransportMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRetryableTransport)(nil).Send), arg0, arg1)
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
	isgomock struct{}
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSender) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), arg0, arg1)
}

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
	isgomock struct{}
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockReceiver) Receive(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockReceiverMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockReceiver)(nil).Receive), arg0, arg1)
}

// MockTransportLocator is a mock of TransportLocator interface.
type MockTransportLocator struct {
	ctrl     *gomock.Controller
	recorder *MockTransportLocatorMockRecorder
	isgomock struct{}
}

// MockTransportLocatorMockRecorder is the mock recorder for MockTransportLocator.
type MockTransportLocatorMockRecorder struct {
	mock *MockTransportLocator
}

// NewMockTransportLocator creates a new mock instance.
func NewMockTransportLocator(ctrl *gomock.Controller) *MockTransportLocator {
	mock := &MockTransportLocator{ctrl: ctrl}
	mock.recorder = &MockTransportLocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportLocator) EXPECT() *MockTransportLocatorMockRecorder {
	return m.recorder
}

// GetAllTransports mocks base method.
func (m *MockTransportLocator) GetAllTransports() []api.Transport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransports")
	ret0, _ := ret[0].([]api.Transport)
	return ret0
}

// GetAllTransports indicates an expected call of GetAllTransports.
func (mr *MockTransportLocatorMockRecorder) GetAllTransports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransports", reflect.TypeOf((*MockTransportLocator)(nil).GetAllTransports))
}

// GetTransport mocks base method.
func (m *MockTransportLocator) GetTransport(arg0 string) api.Transport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransport", arg0)
	ret0, _ := ret[0].(api.Transport)
	return ret0
}

// GetTransport indicates an expected call of GetTransport.
func (mr *MockTransportLocatorMockRecorder) GetTransport(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransport", reflect.TypeOf((*MockTransportLocator)(nil).GetTransport), arg0)
}

// Register mocks base method.
func (m *MockTransportLocator) Register(arg0 string, arg1 api.Transport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockTransportLocatorMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTransportLocator)(nil).Register), arg0, arg1)
}

// MockTransportFactory is a mock of TransportFactory interface.
type MockTransportFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTransportFactoryMockRecorder
	isgomock struct{}
}

// MockTransportFactoryMockRecorder is the mock recorder for MockTransportFactory.
type MockTransportFactoryMockRecorder struct {
	mock *MockTransportFactory
}

// NewMockTransportFactory creates a new mock instance.
func NewMockTransportFactory(ctrl *gomock.Controller) *MockTransportFactory {
	mock := &MockTransportFactory{ctrl: ctrl}
	mock.recorder = &MockTransportFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportFactory) EXPECT() *MockTransportFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransportFactory) Create(arg0, arg1 string, arg2 config.OptionsConfig) (api.Transport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.Transport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransportFactoryMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransportFactory)(nil).Create), arg0, arg1, arg2)
}

// Supports mocks base method.
func (m *MockTransportFactory) Supports(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supports", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Supports indicates an expected call of Supports.
func (mr *MockTransportFactoryMockRecorder) Supports(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supports", reflect.TypeOf((*MockTransportFactory)(nil).Supports), arg0)
}

// MockRoutedMessage is a mock of RoutedMessage interface.
type MockRoutedMessage struct {
	ctrl     *gomock.Controller
	recorder *MockRoutedMessageMockRecorder
	isgomock struct{}
}

// MockRoutedMessageMockRecorder is the mock recorder for MockRoutedMessage.
type MockRoutedMessageMockRecorder struct {
	mock *MockRoutedMessage
}

// NewMockRoutedMessage creates a new mock instance.
func NewMockRoutedMessage(ctrl *gomock.Controller) *MockRoutedMessage {
	mock := &MockRoutedMessage{ctrl: ctrl}
	mock.recorder = &MockRoutedMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutedMessage) EXPECT() *MockRoutedMessageMockRecorder {
	return m.recorder
}

// RoutingKey mocks base method.
func (m *MockRoutedMessage) RoutingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoutingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// RoutingKey indicates an expected call of RoutingKey.
func (mr *MockRoutedMessageMockRecorder) RoutingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingKey", reflect.TypeOf((*MockRoutedMessage)(nil).RoutingKey))
}
