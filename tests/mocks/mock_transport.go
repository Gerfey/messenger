// Code generated by MockGen. DO NOT EDIT.
// Source: api/transport.go
//
// Generated by this command:
//
//	mockgen -source=api/transport.go -destination=tests/mocks/mock_transport.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/gerfey/messenger/api"
	gomock "go.uber.org/mock/gomock"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
	isgomock struct{}
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransportMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransport)(nil).Close))
}

// Name mocks base method.
func (m *MockTransport) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTransportMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTransport)(nil).Name))
}

// Receive mocks base method.
func (m *MockTransport) Receive(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockTransportMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockTransport)(nil).Receive), arg0, arg1)
}

// Send mocks base method.
func (m *MockTransport) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTransportMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransport)(nil).Send), arg0, arg1)
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
	isgomock struct{}
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockSender) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSenderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSender)(nil).Name))
}

// Send mocks base method.
func (m *MockSender) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), arg0, arg1)
}

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
	isgomock struct{}
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockReceiver) Receive(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockReceiverMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockReceiver)(nil).Receive), arg0, arg1)
}

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
	isgomock struct{}
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Send mocks base method.
func (m *MockProducer) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), arg0, arg1)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
}

// Consume mocks base method.
func (m *MockConsumer) Consume(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), arg0, arg1)
}

// MockRetryableTransport is a mock of RetryableTransport interface.
type MockRetryableTransport struct {
	ctrl     *gomock.Controller
	recorder *MockRetryableTransportMockRecorder
	isgomock struct{}
}

// MockRetryableTransportMockRecorder is the mock recorder for MockRetryableTransport.
type MockRetryableTransportMockRecorder struct {
	mock *MockRetryableTransport
}

// NewMockRetryableTransport creates a new mock instance.
func NewMockRetryableTransport(ctrl *gomock.Controller) *MockRetryableTransport {
	mock := &MockRetryableTransport{ctrl: ctrl}
	mock.recorder = &MockRetryableTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryableTransport) EXPECT() *MockRetryableTransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRetryableTransport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRetryableTransportMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRetryableTransport)(nil).Close))
}

// Name mocks base method.
func (m *MockRetryableTransport) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRetryableTransportMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRetryableTransport)(nil).Name))
}

// Receive mocks base method.
func (m *MockRetryableTransport) Receive(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockRetryableTransportMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockRetryableTransport)(nil).Receive), arg0, arg1)
}

// Retry mocks base method.
func (m *MockRetryableTransport) Retry(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retry indicates an expected call of Retry.
func (mr *MockRetryableTransportMockRecorder) Retry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockRetryableTransport)(nil).Retry), arg0, arg1)
}

// Send mocks base method.
func (m *MockRetryableTransport) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRetryableTransportMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRetryableTransport)(nil).Send), arg0, arg1)
}

// MockSetupableTransport is a mock of SetupableTransport interface.
type MockSetupableTransport struct {
	ctrl     *gomock.Controller
	recorder *MockSetupableTransportMockRecorder
	isgomock struct{}
}

// MockSetupableTransportMockRecorder is the mock recorder for MockSetupableTransport.
type MockSetupableTransportMockRecorder struct {
	mock *MockSetupableTransport
}

// NewMockSetupableTransport creates a new mock instance.
func NewMockSetupableTransport(ctrl *gomock.Controller) *MockSetupableTransport {
	mock := &MockSetupableTransport{ctrl: ctrl}
	mock.recorder = &MockSetupableTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetupableTransport) EXPECT() *MockSetupableTransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSetupableTransport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSetupableTransportMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSetupableTransport)(nil).Close))
}

// Name mocks base method.
func (m *MockSetupableTransport) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSetupableTransportMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSetupableTransport)(nil).Name))
}

// Receive mocks base method.
func (m *MockSetupableTransport) Receive(arg0 context.Context, arg1 func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockSetupableTransportMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockSetupableTransport)(nil).Receive), arg0, arg1)
}

// Send mocks base method.
func (m *MockSetupableTransport) Send(arg0 context.Context, arg1 api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSetupableTransportMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSetupableTransport)(nil).Send), arg0, arg1)
}

// Setup mocks base method.
func (m *MockSetupableTransport) Setup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockSetupableTransportMockRecorder) Setup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockSetupableTransport)(nil).Setup), ctx)
}

// MockSenderLocator is a mock of SenderLocator interface.
type MockSenderLocator struct {
	ctrl     *gomock.Controller
	recorder *MockSenderLocatorMockRecorder
	isgomock struct{}
}

// MockSenderLocatorMockRecorder is the mock recorder for MockSenderLocator.
type MockSenderLocatorMockRecorder struct {
	mock *MockSenderLocator
}

// NewMockSenderLocator creates a new mock instance.
func NewMockSenderLocator(ctrl *gomock.Controller) *MockSenderLocator {
	mock := &MockSenderLocator{ctrl: ctrl}
	mock.recorder = &MockSenderLocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSenderLocator) EXPECT() *MockSenderLocatorMockRecorder {
	return m.recorder
}

// GetSenders mocks base method.
func (m *MockSenderLocator) GetSenders(arg0 api.Envelope) []api.Sender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenders", arg0)
	ret0, _ := ret[0].([]api.Sender)
	return ret0
}

// GetSenders indicates an expected call of GetSenders.
func (mr *MockSenderLocatorMockRecorder) GetSenders(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenders", reflect.TypeOf((*MockSenderLocator)(nil).GetSenders), arg0)
}

// Register mocks base method.
func (m *MockSenderLocator) Register(arg0 string, arg1 api.Sender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockSenderLocatorMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSenderLocator)(nil).Register), arg0, arg1)
}

// RegisterMessageType mocks base method.
func (m *MockSenderLocator) RegisterMessageType(arg0 reflect.Type, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterMessageType", arg0, arg1)
}

// RegisterMessageType indicates an expected call of RegisterMessageType.
func (mr *MockSenderLocatorMockRecorder) RegisterMessageType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMessageType", reflect.TypeOf((*MockSenderLocator)(nil).RegisterMessageType), arg0, arg1)
}

// SetFallback mocks base method.
func (m *MockSenderLocator) SetFallback(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFallback", arg0)
}

// SetFallback indicates an expected call of SetFallback.
func (mr *MockSenderLocatorMockRecorder) SetFallback(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFallback", reflect.TypeOf((*MockSenderLocator)(nil).SetFallback), arg0)
}

// MockTransportFactory is a mock of TransportFactory interface.
type MockTransportFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTransportFactoryMockRecorder
	isgomock struct{}
}

// MockTransportFactoryMockRecorder is the mock recorder for MockTransportFactory.
type MockTransportFactoryMockRecorder struct {
	mock *MockTransportFactory
}

// NewMockTransportFactory creates a new mock instance.
func NewMockTransportFactory(ctrl *gomock.Controller) *MockTransportFactory {
	mock := &MockTransportFactory{ctrl: ctrl}
	mock.recorder = &MockTransportFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportFactory) EXPECT() *MockTransportFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransportFactory) Create(arg0, arg1 string, arg2 []byte, arg3 api.Serializer) (api.Transport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(api.Transport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransportFactoryMockRecorder) Create(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransportFactory)(nil).Create), arg0, arg1, arg2, arg3)
}

// Supports mocks base method.
func (m *MockTransportFactory) Supports(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supports", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Supports indicates an expected call of Supports.
func (mr *MockTransportFactoryMockRecorder) Supports(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supports", reflect.TypeOf((*MockTransportFactory)(nil).Supports), arg0)
}

// MockRoutedMessage is a mock of RoutedMessage interface.
type MockRoutedMessage struct {
	ctrl     *gomock.Controller
	recorder *MockRoutedMessageMockRecorder
	isgomock struct{}
}

// MockRoutedMessageMockRecorder is the mock recorder for MockRoutedMessage.
type MockRoutedMessageMockRecorder struct {
	mock *MockRoutedMessage
}

// NewMockRoutedMessage creates a new mock instance.
func NewMockRoutedMessage(ctrl *gomock.Controller) *MockRoutedMessage {
	mock := &MockRoutedMessage{ctrl: ctrl}
	mock.recorder = &MockRoutedMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutedMessage) EXPECT() *MockRoutedMessageMockRecorder {
	return m.recorder
}

// RoutingKey mocks base method.
func (m *MockRoutedMessage) RoutingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoutingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// RoutingKey indicates an expected call of RoutingKey.
func (mr *MockRoutedMessageMockRecorder) RoutingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingKey", reflect.TypeOf((*MockRoutedMessage)(nil).RoutingKey))
}
