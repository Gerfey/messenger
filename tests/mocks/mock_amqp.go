// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../../tests/mocks/mock_amqp.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/gerfey/messenger/api"
	amqp "github.com/gerfey/messenger/transport/amqp"
	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionAMQP is a mock of ConnectionAMQP interface.
type MockConnectionAMQP struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionAMQPMockRecorder
	isgomock struct{}
}

// MockConnectionAMQPMockRecorder is the mock recorder for MockConnectionAMQP.
type MockConnectionAMQPMockRecorder struct {
	mock *MockConnectionAMQP
}

// NewMockConnectionAMQP creates a new mock instance.
func NewMockConnectionAMQP(ctrl *gomock.Controller) *MockConnectionAMQP {
	mock := &MockConnectionAMQP{ctrl: ctrl}
	mock.recorder = &MockConnectionAMQPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionAMQP) EXPECT() *MockConnectionAMQPMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockConnectionAMQP) Channel() (amqp.ChannelAMQP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(amqp.ChannelAMQP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockConnectionAMQPMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockConnectionAMQP)(nil).Channel))
}

// Close mocks base method.
func (m *MockConnectionAMQP) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionAMQPMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnectionAMQP)(nil).Close))
}

// IsClosed mocks base method.
func (m *MockConnectionAMQP) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockConnectionAMQPMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConnectionAMQP)(nil).IsClosed))
}

// MockChannelAMQP is a mock of ChannelAMQP interface.
type MockChannelAMQP struct {
	ctrl     *gomock.Controller
	recorder *MockChannelAMQPMockRecorder
	isgomock struct{}
}

// MockChannelAMQPMockRecorder is the mock recorder for MockChannelAMQP.
type MockChannelAMQPMockRecorder struct {
	mock *MockChannelAMQP
}

// NewMockChannelAMQP creates a new mock instance.
func NewMockChannelAMQP(ctrl *gomock.Controller) *MockChannelAMQP {
	mock := &MockChannelAMQP{ctrl: ctrl}
	mock.recorder = &MockChannelAMQPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelAMQP) EXPECT() *MockChannelAMQPMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockChannelAMQP) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChannelAMQPMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChannelAMQP)(nil).Close))
}

// Consume mocks base method.
func (m *MockChannelAMQP) Consume(queue, consumer string, autoAck, exclusive, noLocal, noWait bool, args amqp091.Table) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockChannelAMQPMockRecorder) Consume(queue, consumer, autoAck, exclusive, noLocal, noWait, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockChannelAMQP)(nil).Consume), queue, consumer, autoAck, exclusive, noLocal, noWait, args)
}

// ExchangeDeclare mocks base method.
func (m *MockChannelAMQP) ExchangeDeclare(name, kind string, durable, autoDelete, internal, noWait bool, args amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockChannelAMQPMockRecorder) ExchangeDeclare(name, kind, durable, autoDelete, internal, noWait, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockChannelAMQP)(nil).ExchangeDeclare), name, kind, durable, autoDelete, internal, noWait, args)
}

// Publish mocks base method.
func (m *MockChannelAMQP) Publish(exchange, key string, mandatory, immediate bool, msg amqp091.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockChannelAMQPMockRecorder) Publish(exchange, key, mandatory, immediate, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockChannelAMQP)(nil).Publish), exchange, key, mandatory, immediate, msg)
}

// QueueBind mocks base method.
func (m *MockChannelAMQP) QueueBind(name, key, exchange string, noWait bool, args amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", name, key, exchange, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind.
func (mr *MockChannelAMQPMockRecorder) QueueBind(name, key, exchange, noWait, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockChannelAMQP)(nil).QueueBind), name, key, exchange, noWait, args)
}

// QueueDeclare mocks base method.
func (m *MockChannelAMQP) QueueDeclare(name string, durable, autoDelete, exclusive, noWait bool, args amqp091.Table) (amqp091.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp091.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare.
func (mr *MockChannelAMQPMockRecorder) QueueDeclare(name, durable, autoDelete, exclusive, noWait, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockChannelAMQP)(nil).QueueDeclare), name, durable, autoDelete, exclusive, noWait, args)
}

// MockPublisherAMQP is a mock of PublisherAMQP interface.
type MockPublisherAMQP struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherAMQPMockRecorder
	isgomock struct{}
}

// MockPublisherAMQPMockRecorder is the mock recorder for MockPublisherAMQP.
type MockPublisherAMQPMockRecorder struct {
	mock *MockPublisherAMQP
}

// NewMockPublisherAMQP creates a new mock instance.
func NewMockPublisherAMQP(ctrl *gomock.Controller) *MockPublisherAMQP {
	mock := &MockPublisherAMQP{ctrl: ctrl}
	mock.recorder = &MockPublisherAMQPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherAMQP) EXPECT() *MockPublisherAMQPMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisherAMQP) Publish(ctx context.Context, env api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherAMQPMockRecorder) Publish(ctx, env any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisherAMQP)(nil).Publish), ctx, env)
}

// MockConsumerAMQP is a mock of ConsumerAMQP interface.
type MockConsumerAMQP struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerAMQPMockRecorder
	isgomock struct{}
}

// MockConsumerAMQPMockRecorder is the mock recorder for MockConsumerAMQP.
type MockConsumerAMQPMockRecorder struct {
	mock *MockConsumerAMQP
}

// NewMockConsumerAMQP creates a new mock instance.
func NewMockConsumerAMQP(ctrl *gomock.Controller) *MockConsumerAMQP {
	mock := &MockConsumerAMQP{ctrl: ctrl}
	mock.recorder = &MockConsumerAMQPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerAMQP) EXPECT() *MockConsumerAMQPMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockConsumerAMQP) Consume(ctx context.Context, handler func(context.Context, api.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerAMQPMockRecorder) Consume(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumerAMQP)(nil).Consume), ctx, handler)
}

// MockRetryAMQP is a mock of RetryAMQP interface.
type MockRetryAMQP struct {
	ctrl     *gomock.Controller
	recorder *MockRetryAMQPMockRecorder
	isgomock struct{}
}

// MockRetryAMQPMockRecorder is the mock recorder for MockRetryAMQP.
type MockRetryAMQPMockRecorder struct {
	mock *MockRetryAMQP
}

// NewMockRetryAMQP creates a new mock instance.
func NewMockRetryAMQP(ctrl *gomock.Controller) *MockRetryAMQP {
	mock := &MockRetryAMQP{ctrl: ctrl}
	mock.recorder = &MockRetryAMQPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryAMQP) EXPECT() *MockRetryAMQPMockRecorder {
	return m.recorder
}

// Retry mocks base method.
func (m *MockRetryAMQP) Retry(ctx context.Context, env api.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retry", ctx, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retry indicates an expected call of Retry.
func (mr *MockRetryAMQPMockRecorder) Retry(ctx, env any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockRetryAMQP)(nil).Retry), ctx, env)
}
