// Code generated by MockGen. DO NOT EDIT.
// Source: api/routing.go
//
// Generated by this command:
//
//	mockgen -source=api/routing.go -destination=tests/mocks/mock_router.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
	isgomock struct{}
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// GetTransportFor mocks base method.
func (m *MockRouter) GetTransportFor(arg0 any) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransportFor", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTransportFor indicates an expected call of GetTransportFor.
func (mr *MockRouterMockRecorder) GetTransportFor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransportFor", reflect.TypeOf((*MockRouter)(nil).GetTransportFor), arg0)
}

// GetUsedTransports mocks base method.
func (m *MockRouter) GetUsedTransports() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedTransports")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUsedTransports indicates an expected call of GetUsedTransports.
func (mr *MockRouterMockRecorder) GetUsedTransports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedTransports", reflect.TypeOf((*MockRouter)(nil).GetUsedTransports))
}

// RouteMessageTo mocks base method.
func (m *MockRouter) RouteMessageTo(arg0 any, arg1 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RouteMessageTo", varargs...)
}

// RouteMessageTo indicates an expected call of RouteMessageTo.
func (mr *MockRouterMockRecorder) RouteMessageTo(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteMessageTo", reflect.TypeOf((*MockRouter)(nil).RouteMessageTo), varargs...)
}

// RouteTypeTo mocks base method.
func (m *MockRouter) RouteTypeTo(arg0 reflect.Type, arg1 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RouteTypeTo", varargs...)
}

// RouteTypeTo indicates an expected call of RouteTypeTo.
func (mr *MockRouterMockRecorder) RouteTypeTo(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteTypeTo", reflect.TypeOf((*MockRouter)(nil).RouteTypeTo), varargs...)
}
